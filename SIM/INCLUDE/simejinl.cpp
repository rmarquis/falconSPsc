////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// EP_MODEL_DATA inlines.

inline EP_MODEL_DATA::EP_MODEL_DATA
(
	int bsp_,
	int creationStage_,
	int chaseMode_,
	const EP_VECTOR &focusOffset_
)
{
	bsp = bsp_;
	creationStage = creationStage_;
	chaseMode = chaseMode_;
	focusOffset = focusOffset_;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline EP_MODEL_DATA::~EP_MODEL_DATA()
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// EjectedPilotClass inlines.

inline SIM_FLOAT EjectedPilotClass::StageEndTime(int stage) const
{
	// Do some assertions.
	F4Assert(_pd != NULL);

	// Give us the data that we want.
	return 
	(
		stage <= PD_START ?
		0.0F :
		_pd->stageData[stage][SDPD_END_TIME_INDEX] + _endStageTimeAdjust
	);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline SIM_FLOAT EjectedPilotClass::StageEndTime() const
{
	return StageEndTime(_stage);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline SIM_FLOAT	EjectedPilotClass::DragFactor() const
{
	// Do some assertions.
	F4Assert(_pd != NULL);

	// Give us the data that we want.
	return (_pd->stageData[_stage][SDPD_DRAG_FACTOR_INDEX]);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline SIM_FLOAT	EjectedPilotClass::Mass() const
{
	// Do some assertions.
	F4Assert(_pd != NULL);
	
	// Give us the data that we want.
	return (_pd->stageData[_stage][SDPD_MASS_INDEX]);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline SIM_FLOAT EjectedPilotClass::EjectSpeed() const
{
	// Do some assertions.
	F4Assert(_pd != NULL);

	// Give us the data that we want.
	return (_pd->ejectSpeed);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline SIM_FLOAT EjectedPilotClass::SeatThrust() const
{
	// Do some assertions.
	F4Assert(_pd != NULL);

	// Give us the data that we want.
	return (_pd->seatThrust);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline SIM_FLOAT EjectedPilotClass::EjectAngle() const
{
	// Do some assertions.
	F4Assert(_pd != NULL);

	// Give us the data that we want.
	return (_pd->ejectAngle);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline SIM_FLOAT EjectedPilotClass::StartPitch() const
{
	// Do some assertions.
	F4Assert(_pd != NULL);

	// Give us the data that we want.
	return (_pd->startPitch);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline SIM_FLOAT EjectedPilotClass::PitchDecay() const
{
	// Do some assertions.
	F4Assert(_pd != NULL);

	// Give us the data that we want.
	return (_pd->pitchDecay);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline SIM_FLOAT	EjectedPilotClass::YawSpeed() const
{
	// Do some assertions.
	F4Assert(_pd != NULL);

	// Give us the data that we want.
	return (_pd->yawSpeed);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline EP_VECTOR EjectedPilotClass::SeatOffset() const
{
	// Do some assertions.
	F4Assert(_pd != NULL);

	// Give us the data that we want.
	return EP_VECTOR
	(
		_pd->seatXOffset,
		_pd->seatYOffset,
		_pd->seatZOffset
	);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline SIM_FLOAT EjectedPilotClass::ModelCreateTime(int model) const
{
	int creationStage;

	F4Assert(_md != NULL);

	creationStage = _md[model].creationStage;
	return 
	(
		creationStage == PD_FREE_FALL_WITH_COLLAPSED_CHUTE ?
		_chuteCollapsedTime : 
		StageEndTime(creationStage - 1)
	);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline void EjectedPilotClass::SetStage(int stage)
{
	_stage = stage;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline int EjectedPilotClass::AdvanceStage()
{
	SetStage(++_stage);
	return _stage;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/*
inline void EjectedPilotClass::ExecFromAircraft()
{
	_execCalledFromAircraft = TRUE;
	Exec();
	_execCalledFromAircraft = FALSE;
}
*/
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline BOOL EjectedPilotClass::IsPlayerPilot() const
{
	return
	(
		_isPlayer ? TRUE : FALSE
	);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

inline BOOL EjectedPilotClass::IsDigiPilot() const
{
	return
	(
		_isDigital ? TRUE : FALSE
	);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/*
inline BOOL EjectedPilotClass::CanCollideWithOwnAircraft() const
{
	return
	(
		_stage >= PD_CHUTE_OPENING ?
		TRUE :
		FALSE
	);
}
*/

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
