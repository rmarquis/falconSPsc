///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

class C_Handler;
class C_Parser;
class C_Window;

extern void hookup_tactical_controls (long ID);

extern void hookup_team_victory_window (C_Window *win);
extern void hookup_toolbar_buttons (C_Window *win);
extern void hookup_list_buttons (C_Window *win);
extern void hookup_flow_buttons (C_Window *win);
extern void hookup_map_windows (C_Window *win);
extern void hookup_new_squad_window (C_Window *win);
extern void hookup_new_battalion_window (C_Window *win);
extern void hookup_tactical_pick (C_Window *win);
extern void hookup_edit_controls (C_Window *win);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

extern void update_team_victory_window (void);
extern void update_tactical_flight_list (void);
extern void update_missions_details(long winID);
extern void save_territory_editor (void);
extern void tactical_update_campaign_entities (void);
extern void tactical_accept_mission (void);
extern void do_tactical_debrief (void);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
 
extern void DeleteGroupList(long ID);
extern void CloseWindowCB (long ID, short hittype, C_Base *ctrl);
extern void OpenTacticalReferenceCB(long,short,C_Base*);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

extern C_Handler *gMainHandler;
extern C_Parser  *gMainParser;

class C_Map;

extern C_Map *tactical_map;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

extern tactical_mission
	*current_tactical_mission;

extern int
	tactical_debriefing,
	tactical_mission_loaded;

extern int
	TACLoaded;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

extern void create_tactical_list (void);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

extern void tactical_select_load (long ID, short hittype, C_Base *ctrl);
extern void tactical_select_join (long ID, short hittype, C_Base *ctrl);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

extern void change_tactical_time (long ID, short hittype, C_Base *ctrl);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
