/*
 * Machine Generated source file for message "Camp Dirty Data".
 * NOTE: The functions here must be completed by hand.
 * Generated on 17-November-1998 at 20:52:31
 * Generated from file EVENTS.XLS by Robin Heydon
 */

#include "MsgInc\CampDirtyDataMsg.h"
#include "mesg.h"

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

CampDirtyData::CampDirtyData(VU_ID entityId, VuTargetEntity *target, VU_BOOL loopback) : FalconEvent (CampDirtyDataMsg, FalconEvent::CampaignThread, entityId, target, loopback)
{
	dataBlock.data = NULL;
	dataBlock.size = 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

CampDirtyData::CampDirtyData(VU_MSG_TYPE type, VU_ID senderid, VU_ID target) : FalconEvent (CampDirtyDataMsg, FalconEvent::CampaignThread, senderid, target)
{
	dataBlock.data = NULL;
	dataBlock.size = 0;
	type;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

CampDirtyData::~CampDirtyData(void)
{
	if (dataBlock.data)
	{
		delete dataBlock.data;
	}

	dataBlock.data = NULL;
	dataBlock.size = 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int CampDirtyData::Size (void)
{
    	ShiAssert ( dataBlock.size >= 0 );
	return
	(
		FalconEvent::Size() +
		sizeof(ushort) +		
		dataBlock.size
	);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int CampDirtyData::Decode (VU_BYTE **buf, int length)
{
	int
		size;

	size = FalconEvent::Decode (buf, length);
	memcpy (&dataBlock.size, *buf, sizeof(ushort));				*buf += sizeof(ushort);			size += sizeof(ushort);		
	ShiAssert (dataBlock.size > 0);
	dataBlock.data = new uchar[dataBlock.size];
	memcpy (dataBlock.data, *buf, dataBlock.size);				*buf += dataBlock.size;			size += dataBlock.size;		

	ShiAssert (size == Size());

	return size;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int CampDirtyData::Encode (VU_BYTE **buf)
{
	int
		size;

	size = FalconEvent::Encode (buf);
	ShiAssert (dataBlock.size > 0);
	memcpy (*buf, &dataBlock.size, sizeof(ushort));				*buf += sizeof(ushort);			size += sizeof(ushort);		
	memcpy (*buf, dataBlock.data, dataBlock.size);				*buf += dataBlock.size;			size += dataBlock.size;		

	ShiAssert (size == Size());

	return size;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int CampDirtyData::Process(uchar autodisp)
{
	FalconEntity
		*ent;

	unsigned char
		*data;

	int
		size;
	
	ent = (FalconEntity*) vuDatabase->Find (EntityId ());

	if (!ent || autodisp)
		return 0;

	data = dataBlock.data;

	// Only accept data if this is a remote entity
	if (!ent->IsLocal())
	{
		size = ent->DecodeDirty (&data);

		assert (size == dataBlock.size);
	}

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

