///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include "vu2.h"
#include "vu_priv.h"

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// VuHashIterator
//-----------------------------------------------------------------------------

VuHashIterator::VuHashIterator(VuHashTable* coll) : VuIterator(coll)
{
	curr_ = vuTailNode;
	entry_ = 0;

	vuCollectionManager->Register(this);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuHashIterator::~VuHashIterator()
{
	vuCollectionManager->DeRegister(this);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuHashIterator::GetFirst()
{
	if (collection_)
	{
		entry_ = ((VuHashTable*)collection_)->table_;
		
		while (*entry_ == vuTailNode)
		{
			entry_++;
		}

		if (*entry_ == 0)
		{
			curr_ = vuTailNode;
		}
		else
		{
			curr_ = *entry_;
		}

		return curr_->entity_;
	}

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuHashIterator::GetNext()
{
	curr_ = curr_->next_;

	if (curr_ != vuTailNode)
	{
		return curr_->entity_;
	}

	entry_++;

	while (*entry_ == vuTailNode)
	{
		entry_++;
	}

	if (*entry_ == 0)
	{
		curr_ = vuTailNode;
	}
	else
	{
		curr_ = *entry_;
	}

	return curr_->entity_;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuHashIterator::GetFirst(VuFilter* filter)
{
	GetFirst();
	
	if (filter)
	{
		if (curr_->entity_ == 0)
		{
			return curr_->entity_;
		}

		if (filter->Test(curr_->entity_))
		{
			return curr_->entity_;
		}

		return GetNext(filter);
	}

	return curr_->entity_;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuHashIterator::GetNext(VuFilter* filter)
{
	GetNext();
	
	if (filter)
	{
		if (curr_->entity_ == 0)
		{
			return curr_->entity_;
		}

		if (filter->Test(curr_->entity_))
		{
			return curr_->entity_;
		}

		return GetNext(filter);
	}
	
	return curr_->entity_;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuHashIterator::CurrEnt()
{
	return curr_->entity_;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_BOOL VuHashIterator::IsReferenced (VuEntity* ent)
{
// 2002-02-04 MODIFIED BY S.G. If ent is false, then it can't be a valid entity, right? That's what I think too :-)
//	if (curr_->entity_ == ent)
	if (ent && curr_->entity_ == ent)
	{
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_ERRCODE VuHashIterator::Cleanup ()
{
	curr_ = vuTailNode;

	return VU_SUCCESS;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

