///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include "vu2.h"
#include "vu_priv.h"

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// VuFifoQueue
//-----------------------------------------------------------------------------

VuFifoQueue::VuFifoQueue(VuFilter* filter) : VuFilteredList(filter)
{
	last_ = head_;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuFifoQueue::~VuFifoQueue()
{
	// empty
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_ERRCODE
VuFifoQueue::Insert(VuEntity* entity)
{
	if (filter_->Test(entity))
		return ForcedInsert(entity);
	else
		return VU_NO_OP;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_ERRCODE
VuFifoQueue::ForcedInsert(VuEntity* entity)
{
	if (entity->VuState() == VU_MEM_ACTIVE) {
		if (filter_->RemoveTest(entity)) {
			
			VuEnterCriticalSection();
			if (head_ != tail_) {
				last_->next_ = new VuLinkNode(entity, tail_);
				last_        = last_->next_;
			} 
			else {
				head_ = last_ = new VuLinkNode(entity, tail_); // first entity in queue...
			}
			VuExitCriticalSection();
			
			return VU_SUCCESS;
		}
		return VU_NO_OP;
	} 
	return VU_ERROR;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_ERRCODE VuFifoQueue::Remove(VuEntity *entity)
{
	VuEnterCriticalSection();
	
	VuLinkNode* cur = head_;
	VuLinkNode* last = 0;
	
	while (cur->entity_)
	{
		if (cur->entity_ == entity)
		{
			if (last)
			{
				last->next_ = cur->next_;
			}
			else
			{
				head_ = cur->next_;
			}

			if (cur == last_)
			{
				if (last)
				{
					last_ = last;
				}
				else
				{
					last_ = head_;
				}
			}

			vuCollectionManager->PutOnKillQueue(cur);
			VuExitCriticalSection();

			return VU_SUCCESS;
		}

		last = cur;
		cur  = cur->next_;
	}

	VuExitCriticalSection();
	
	return VU_NO_OP;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_ERRCODE VuFifoQueue::Remove(VU_ID entityId)
{
	VuEntity* ent = vuDatabase->Find(entityId);

	if (ent)
	{
		return Remove(ent);
	}

	return VU_NO_OP;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int VuFifoQueue::Purge(VU_BOOL all)
{
	VuEnterCriticalSection();
	
	int retval = VuLinkedList::Purge(all);

	last_ = head_;

	while (last_->entity_)
	{
		last_ = last_->next_;
	}
	
	VuExitCriticalSection();

	return retval;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int VuFifoQueue::Type()
{
	return VU_FIFO_QUEUE_COLLECTION;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuFifoQueue::Peek()
{
	return head_->entity_;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuFifoQueue::Pop()
{
	VuEntity *retval = Peek();
	Remove(retval);

	return retval;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
