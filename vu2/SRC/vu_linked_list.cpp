///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include "vu2.h"
#include "vu_priv.h"

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// VuLinkedList
//-----------------------------------------------------------------------------

VuLinkedList::VuLinkedList() : VuCollection()
{
	tail_ = vuTailNode;
	head_ = tail_;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuLinkedList::~VuLinkedList()
{
	Purge();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_ERRCODE
VuLinkedList::Insert(VuEntity* entity)
{
	if (entity->VuState() == VU_MEM_ACTIVE) {
		VuEnterCriticalSection();
//		assert(Find(entity) == NULL); // this fires all the time - from FindNearestSupplySource
		head_ = new VuLinkNode(entity, head_);
		VuExitCriticalSection();
		return 1;
	}
	return VU_ERROR;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_ERRCODE
VuLinkedList::Remove(VuEntity* entity)
{
	VuListMuckyIterator iter(this);
	
	for (VuEntity *ptr = iter.GetFirst(); ptr; ptr = iter.GetNext()) {
		if (ptr == entity) {
			iter.RemoveCurrent();
			return 1;
		}
	}
	// did not find entity
	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_ERRCODE
VuLinkedList::Remove(VU_ID entityId)
{
	VuListMuckyIterator iter(this);
	
	for (VuEntity* ptr = iter.GetFirst(); ptr; ptr = iter.GetNext()) {
		if (ptr->Id() == entityId) {
			iter.RemoveCurrent();
			return 1;
		}
	}
	// did not find entity
	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int
VuLinkedList::Purge(VU_BOOL all)
{
	int retval = 0;
	VuLinkNode *next, *cur, *last = 0;
	VuEnterCriticalSection();
	cur = head_;
	
	while (cur && cur->entity_) {
		next = cur->next_;
		VuEntity *ent = cur->entity_;
		
		if (!all && ((ent->IsPrivate()&&ent->IsPersistent()) || ent->IsGlobal())) {
			cur->next_ = vuTailNode;
			if (last) {
				last->next_ = cur;
			} else {
				head_ = cur;
			}
			last = cur;
		} else {
			vuCollectionManager->PutOnKillQueue(cur, TRUE);
			retval++;
		}
		cur = next;
	}
	if (!last) {
		head_ = vuTailNode;
	}
	
	VuExitCriticalSection();
	return retval;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int
VuLinkedList::Count()
{
	VuListIterator iter(this);
	int cnt = 0;
	
	for (VuEntity *ent = iter.GetFirst(); ent; ent = iter.GetNext()) {
		cnt++;
	}
	return cnt;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity*
VuLinkedList::Find(VU_ID entityId)
{
	VuListIterator iter(this);
	
	for (VuEntity* ent = iter.GetFirst(); ent; ent = iter.GetNext()) {
		if (ent->Id() == entityId) {
			return ent;
		}
	}
	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity*
VuLinkedList::Find(VuEntity* ent)
{
	return Find(ent->Id());
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int
VuLinkedList::Type()
{
	return VU_LINKED_LIST_COLLECTION;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
