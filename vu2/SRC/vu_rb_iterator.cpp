///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include "vu2.h"
#include "vu_priv.h"

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// VuRBIterator
//-----------------------------------------------------------------------------

VuRBIterator::VuRBIterator(VuRedBlackTree* coll) : VuIterator(coll)
{
	curnode_ = 0;
	curlink_ = vuTailNode;
	rbnextiter_ = 0;

	vuCollectionManager->Register(this);
	vuCollectionManager->RBRegister(this);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuRBIterator::VuRBIterator(VuCollection* coll) : VuIterator(coll)
{
	curnode_ = 0;
	curlink_ = vuTailNode;
	rbnextiter_ = 0;

	vuCollectionManager->Register(this);
	vuCollectionManager->RBRegister(this);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuRBIterator::~VuRBIterator ()
{
	vuCollectionManager->DeRegister(this);
	vuCollectionManager->RBDeRegister(this);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuRBIterator::GetFirst ()
{
	if (collection_)
	{
		curnode_ = ((VuRedBlackTree *)collection_)->root_;

		if (curnode_)
		{
			curnode_ = curnode_->TreeMinimum();
			curlink_ = curnode_->head_;
		} 
		else
		{
			curlink_ = vuTailNode;
		}

		return curlink_->entity_;
	}

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuRBIterator::GetFirst (VU_KEY min)
{
	if (collection_)
	{
		curnode_ = ((VuRedBlackTree*)collection_)->root_;

		if (curnode_)
		{
			curnode_ = curnode_->LowerBound(min);
			curlink_ = curnode_->head_;
		}
		else
		{
			curlink_ = vuTailNode;
		} 

		return curlink_->entity_;
	}

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuRBIterator::GetNext ()
{
	if (curnode_)
	{
		curlink_ = curlink_->next_;

		if (curlink_ == vuTailNode)
		{
			curnode_ = curnode_->next_;

			if (curnode_)
			{
				curlink_ = curnode_->head_;
			}
		}

		return curlink_->entity_;
	}

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuRBIterator::GetFirst (VuFilter* filter)
{
	if (collection_)
	{
		VuEntity* retval = GetFirst();

		if ((retval == 0) || (filter->Test(retval)))
		{
			return retval;
		}

		return GetNext (filter);
	}

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuRBIterator::GetNext (VuFilter* filter)
{
	VuEntity* retval = 0;

	while ((retval = GetNext()) != 0)
	{
		if (filter->Test(retval))
		{
			return retval;
		}
	}

	return retval;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuEntity *VuRBIterator::CurrEnt ()
{
	return curlink_->entity_;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_BOOL VuRBIterator::IsReferenced (VuEntity* ent)
{
// 2002-02-04 MODIFIED BY S.G. If ent is false, then it can't be a valid entity, right? That's what I think too :-)
//	if (curlink_->entity_ == ent)
	if (ent && curlink_->entity_ == ent)

	{
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_ERRCODE VuRBIterator::Cleanup()
{
	curnode_ = 0;
	curlink_ = vuTailNode;

	return VU_SUCCESS;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

void VuRBIterator::RemoveCurrent()
{
	if (curnode_ && curlink_->entity_ && curlink_->freenext_ == 0)
	{
		VuEnterCriticalSection();

		if (curnode_->head_ == curlink_)
		{
			curnode_->head_ = curlink_->next_;

			if (curnode_->head_ == vuTailNode)
			{
				((VuRedBlackTree *)collection_)->RemoveNode(curnode_);
			}
		} 
		else
		{
			VuLinkNode *last = curnode_->head_;

			while (last->next_ != curlink_)
			{
				last = last->next_;
			}

			last->next_ = curlink_->next_;
		}

		// put curr on VUs pending delete queue
		vuCollectionManager->PutOnKillQueue(curlink_);
		VuExitCriticalSection();
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
