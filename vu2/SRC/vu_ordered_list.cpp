///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include "vu2.h"
#include "vu_priv.h"

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// VuOrderedList
//-----------------------------------------------------------------------------

VuOrderedList::VuOrderedList(VuFilter* filter) : VuFilteredList(filter)
{
	// empty
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VuOrderedList::~VuOrderedList()
{
	// empty
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_ERRCODE
VuOrderedList::ForcedInsert(VuEntity* entity)
{
	if (entity->VuState() == VU_MEM_ACTIVE) {
		if (filter_->RemoveTest(entity)) {
			
			VuListMuckyIterator iter(this);
			
			for (VuEntity *ptr = iter.GetFirst(); ptr; ptr = iter.GetNext()) {
				if (filter_->Compare(ptr, entity) >= 0) {
					iter.InsertCurrent(entity);
					return VU_SUCCESS;
				}
			}
			
			iter.InsertCurrent(entity);
			return VU_SUCCESS;
		}
		return VU_NO_OP;
	}
	return VU_ERROR;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

VU_ERRCODE
VuOrderedList::Insert(VuEntity *entity)
{
	if (filter_->Test(entity))
		return ForcedInsert(entity);
	else
		return VU_NO_OP;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int
VuOrderedList::Type()
{
	return VU_ORDERED_LIST_COLLECTION;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

